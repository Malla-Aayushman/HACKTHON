async def handle_connection(websocket, path):
    user_id = str(id(websocket))  # Unique identifier for each user session
    print(f"New connection: {user_id}")

    # Initialize a unique chat session for the user
    user_sessions[user_id] = genai.GenerativeModel(
        model_name="gemini-1.5-pro",
        generation_config=generation_config,
        system_instruction=system_instruction,
    ).start_chat(history=[])

    try:
        async for message in websocket:
            data = json.loads(message)
            user_input = data.get("input", "")
            print(f"Received input from {user_id}: {user_input}")

            # Process user input and get a response
            try:
                response = user_sessions[user_id].send_message(user_input)
                response_text = response.text
                cleaned_response = remove_special_symbols(response_text)
                print(f"Response to {user_id}: {cleaned_response}")

                # Control hardware if necessary
                control_hardware(response_text)

                # Send response back to the user
                await websocket.send(json.dumps({"response": cleaned_response}))
            except Exception as e:
                print(f"Error processing message for {user_id}: {e}")
                await websocket.send(json.dumps({"response": "An error occurred. Please try again."}))

    except websockets.exceptions.ConnectionClosed:
        print(f"Connection closed: {user_id}")

    finally:
        # Clean up the session
        if user_id in user_sessions:
            del user_sessions[user_id]

# --- WebSocket Server ---
async def main():
    server = await websockets.serve(handle_connection, "localhost", 8765)
    print("WebSocket server started on ws://localhost:8765")
    await server.wait_closed()

# Start WebSocket server
try:
    asyncio.run(main())
except KeyboardInterrupt:
    print("Server shutting down...")
finally:
    if ser and ser.is_open:
        ser.close()
        print("Serial connection closed.")
